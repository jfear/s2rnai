
# sampletable: TSV file defining sample metadata.
#
# First column must have header name "samplename".
sampletable: 'config/sampletable.tsv'

# sample_dir: directory in which each sample is expected to have its own
# directory and fastq file[s]. If `sampletable` lists a sample with samplename
# SAMPLE1, then at least the file $sample_dir/SAMPLE1/SAMPLE1_R1.fastq.gz is
# expected.
sample_dir: 'data/chipseq_samples'

# Directory to contain reports and other aggregations
aggregation_dir: 'data/chipseq_aggregation'

# Directory in which merged technical replicates will be stored
merged_dir: 'data/chipseq_merged'

# Which key in the `references` dict below to use
assembly: 'dmel'

# If not specified here, use the environment variable REFERENCES_DIR.
references_dir: '/data/LCDB/lcdb-references'

peaks_dir: 'data/chipseq_peaks'


chipseq:
  # The peak_calling section is a list of dicts, each one defining a single
  # chipseq peak-calling run. The output will be created according to `label`
  # and `algorithm`. There will be at least a file
  # `<peaks_dir>/<algorithm>/<label>/peaks.bed`; other files may be created
  # depending on the algorithm.
  #
  # Note that this directory structure means you can have the same label for
  # different peak-callers to more easily compare them.
  #
  # The `ip` and `control` sections expect names found in the "label" column of
  # the sampletable. This column describes the technical replicates, and the
  # merging step of the workflow merges and de-dupes appropriately so that the
  # peak callers only see BAMs with all duplicates removed.
  #
  # The "extra" block is used to pass extra information to the peak-caller in
  # a run-specific manner. Check the wrapper README for details on this. For
  # example, the macs2 wrapper passes `extra` verbatim to the command line, but
  # the spp wrapper handles things differently.
  #
  # Each wrapper is built to accept either single or multiple BAMs and output
  # at least a BED file of peaks.
  #
  peak_calling:
    - label: rep1_qval
      algorithm: macs2
      ip:
        - chip-rep1
      control:
        - input-rep1
      extra: '-g dm --bdg -q 1e-23 --broad --slocal 5000 --nomodel --extsize 600'

    - label: rep2_qval
      algorithm: macs2
      ip:
        - chip-rep2
      control:
        - input-rep2
      extra: '-g dm --bdg -q 1e-23 --broad --slocal 5000 --nomodel --extsize 600'

    - label: chip-rep1
      algorithm: spp
      ip:
        - chip-rep1
      control:
        - input-rep1
      extra:
        fdr: 0.001

    - label: chip-rep2
      algorithm: spp
      ip:
        - chip-rep2
      control:
        - input-rep2
      extra:
        fdr: 0.001
  
aligner:
  index: 'bowtie2'
  tag: 'r6-16'
gtf:
  tag: 'r6-16'

# references has the structure:
#
#   assembly:           [ used as top-level dir for references ]
#     tag:              [ user-defined; often indicates version or release ]
#       type:           [ must be either "gtf" or "fasta" ]
#         url:          [ string or list of urls ]
#         postprocess:  [ string of importable function or dict of function and args ]
#         conversions:  [ list of gtf conversions; only if type == gtf ]
#         indexes:      [ list of indexes to build; only if type == fasta ]

references:
  dmel:
    test:
      fasta:
        url: "https://raw.githubusercontent.com/lcdb/lcdb-test-data/add-chipseq/data/seq/dm6.small.fa"
        postprocess: 'lib.common.gzipped'
        indexes:
          - 'bowtie2'   
    r6-16:
      gtf:
        url: 'ftp://ftp.flybase.net/genomes/Drosophila_melanogaster/dmel_r6.16_FB2017_03/gtf/dmel-all-r6.16.gtf.gz'
        postprocess: "lib.postprocess.dm6.gtf_postprocess"
        conversions:
          - 'refflat'
          - gffutils: # kwargs below will be provided to `gffutils.create_db`
              merge_strategy: 'merge'
              id_spec:
                  transcript: ['transcript_id', 'transcript_symbol']
                  gene: ['gene_id', 'gene_symbol']
              gtf_transcript_key: 'transcript_id'
              gtf_gene_key: 'gene_id'
              disable_infer_genes: True

          # the attribute from the GTF to consider gene ID
          - genelist:
              gene_id: 'gene_id'

          - annotation_hub:
              ahkey: 'AH49581'
              keytype: 'ENSEMBL'

      fb_annotation:
        url: 'ftp://ftp.flybase.net/releases/FB2017_03/precomputed_files/genes/fbgn_annotation_ID.tsv.gz'
        postprocess: "lib.postprocess.dm6.fb_annotation_postprocess"

      fb_synonym:
        url: 'ftp://ftp.flybase.net/releases/FB2017_03/precomputed_files/synonyms/fb_synonym_fb_2017_03.tsv.gz'
        postprocess: "lib.postprocess.dm6.fb_synonym_postprocess"

      fasta:
        url: 'ftp://ftp.flybase.net/genomes/Drosophila_melanogaster/dmel_r6.16_FB2017_03/fasta/dmel-all-chromosome-r6.16.fasta.gz'
        postprocess: "lib.postprocess.dm6.fasta_postprocess"
        indexes:
          - 'bowtie2'
          - 'hisat2'
  phix:
    default:
      fasta:
        url: 'ftp://igenome:G3nom3s4u@ussd-ftp.illumina.com/PhiX/Illumina/RTA/PhiX_Illumina_RTA.tar.gz'
        postprocess: "lib.postprocess.phix.fasta_postprocess"
        indexes:
          - 'bowtie2'
